syntax = "proto3";
package POGOProtos.Settings.Master;

import public "POGOProtos.Enums.proto";
import public "POGOProtos.Settings.Master.Pokemon.proto";
import public "POGOProtos.Data.Player.proto";
import public "POGOProtos.Data.proto";
import public "POGOProtos.Settings.Master.Quest.proto";
import public "POGOProtos.Data.Combat.proto";
import public "POGOProtos.Inventory.Item.proto";
import public "POGOProtos.Settings.Master.Item.proto";
import public "POGOProtos.Data.Badge.proto";
import public "POGOProtos.Data.Avatar.proto";

message IapSettings {
	int32 daily_bonus_coins = 1;
	repeated int32 daily_defender_bonus_per_pokemon = 2;
	int32 daily_defender_bonus_max_defenders = 3;
	repeated string daily_defender_bonus_currency = 4;
	int64 min_time_between_claims_ms = 5;
	bool daily_bonus_enabled = 6;
	bool daily_defender_bonus_enabled = 7;
}

message CombatLeagueSettings {
	repeated string combat_league_template_id = 1;
}

message GymBadgeGmtSettings {
	repeated int32 target = 1;
	float battle_winning_score_per_defender_cp = 2;
	float gym_defending_score_per_minute = 3;
	int32 berry_feeding_score = 4;
	int32 pokemon_deploy_score = 5;
	int32 raid_battle_winning_score = 6;
	int32 lose_all_battles_score = 7;
}

message TypeEffectiveSettings {
	repeated float attack_scalar = 1;
	.POGOProtos.Enums.PokemonType attack_type = 2;
}

message GenderSettings {
	.POGOProtos.Enums.PokemonId pokemon = 1;
	.POGOProtos.Settings.Master.Pokemon.PokemonGenderSettings gender = 2;
}

message CombatSettings {
	message CombatOffensiveInputChallengeSettings {
		float score_per_tap = 1;
		float score_decay_per_second = 2;
		float max_score = 3;
		float high_score_additional_decay_per_second = 4;
		float max_time_additional_decay_per_second = 5;
	}

	message CombatDefensiveInputChallengeSettings {
		float full_rotations_for_max_score = 1;
	}

	float round_duration_seconds = 1;
	float turn_duration_seconds = 2;
	float minigame_duration_seconds = 3;
	float same_type_attack_bonus_multiplier = 4;
	float fast_attack_bonus_multiplier = 5;
	float charge_attack_bonus_multiplier = 6;
	float defense_bonus_multiplier = 7;
	float minigame_bonus_base_multiplier = 8;
	float minigame_bonus_variable_multiplier = 9;
	int32 max_energy = 10;
	float defender_minigame_multiplier = 11;
	float change_pokemon_duration_seconds = 12;
	float minigame_submit_score_duration_seconds = 13;
	float quick_swap_combat_start_available_seconds = 14;
	float quick_swap_cooldown_duration_seconds = 15;
	CombatOffensiveInputChallengeSettings offensive_input_challenge_settings = 16;
	CombatDefensiveInputChallengeSettings defensive_input_challenge_settings = 17;
}

message BelugaPokemonWhitelist {
	int32 max_allowed_pokemon_pokedex_number = 1;
	repeated .POGOProtos.Enums.PokemonId additional_pokemon_allowed = 2;
	repeated .POGOProtos.Enums.Form forms_allowed = 3;
	repeated .POGOProtos.Enums.Costume costumes_allowed = 4;
}

message CombatNpcTrainer {
	string trainer_name = 1;
	string combat_league_template_id = 2;
	string combat_personality_id = 3;
	string win_loot_table_id = 4;
	string lose_loot_table_id = 5;
	.POGOProtos.Data.Player.PlayerAvatar avatar = 7;
	repeated .POGOProtos.Data.NpcPokemon available_pokemon = 8;
	string trainer_title = 9;
	string trainer_quote = 10;
}

message FormSettings {
	.POGOProtos.Enums.PokemonId pokemon = 1;
	repeated Form forms = 2;

	message Form {
		.POGOProtos.Enums.Form form = 1;
		int32 asset_bundle_value = 2;
	}
}

message CameraSettings {
	string next_camera = 1;
	repeated .POGOProtos.Enums.CameraInterpolation interpolation = 2;
	repeated .POGOProtos.Enums.CameraTarget target_type = 3;
	repeated float ease_in_speed = 4;
	repeated float ease_out_speed = 5;
	repeated float duration_seconds = 6;
	repeated float wait_seconds = 7;
	repeated float transition_seconds = 8;
	repeated float angle_degree = 9;
	repeated float angle_offset_degree = 10;
	repeated float pitch_degree = 11;
	repeated float pitch_offset_degree = 12;
	repeated float roll_degree = 13;
	repeated float distance_meters = 14;
	repeated float height_percent = 15;
	repeated float vert_ctr_ratio = 16;
}

message BackgroundModeSettings {
	double weekly_fitness_goal_level1_distance_km = 1;
	double weekly_fitness_goal_level2_distance_km = 2;
	double weekly_fitness_goal_level3_distance_km = 3;
}

message CombatStatStageSettings {
	int32 minimum_stat_stage = 1;
	int32 maximum_stat_stage = 2;
	repeated float attack_buff_multiplier = 3;
	repeated float defense_buff_multiplier = 4;
}

message EncounterSettings {
	float spin_bonus_threshold = 1;
	float excellent_throw_threshold = 2;
	float great_throw_threshold = 3;
	float nice_throw_threshold = 4;
	int32 milestone_threshold = 5;
	bool ar_plus_mode_enabled = 6;
	float ar_close_proximity_threshold = 7;
	float ar_low_awareness_threshold = 8;
	float ar_close_proximity_multiplier = 9;
	float ar_awareness_penalty_threshold = 10;
	float ar_low_awareness_max_multiplier = 11;
	float ar_high_awareness_min_penalty_multiplier = 12;
	int32 ar_plus_attempts_until_flee_max = 13;
	int32 ar_plus_attempts_until_flee_infinite = 14;
	float escaped_bonus_multiplier_max = 15;
	float escaped_bonus_multiplier_by_excellent_throw = 16;
	float escaped_bonus_multiplier_by_great_throw = 17;
	float escaped_bonus_multiplier_by_nice_throw = 18;
}

message OnboardingV2Settings {
	bool enable_onboarding_v2 = 1;
	repeated .POGOProtos.Enums.PokemonId pokedex_id = 2;
	.POGOProtos.Enums.PokemonId onboarding_egg_pokemon = 3;
	int32 egg_km_until_hatch = 4;
}

message WeatherAffinity {
	.POGOProtos.Enums.WeatherCondition weather_condition = 1;
	repeated .POGOProtos.Enums.PokemonType pokemon_type = 2;
}

message WeatherBonus {
	int32 cp_base_level_bonus = 1;
	int32 guaranteed_individual_values = 2;
	double stardust_bonus_multiplier = 3;
	double attack_bonus_multiplier = 4;
	int32 raid_encounter_cp_base_level_bonus = 5;
	int32 raid_encounter_guaranteed_individual_values = 6;
}

message PokemonSettings {
	message PokemonThirdMoveAttributes {
		int32 stardust_to_unlock = 1;
		int32 candy_to_unlock = 2;
	}

	.POGOProtos.Enums.PokemonId pokemon_id = 1;
	float model_scale = 3;
	.POGOProtos.Enums.PokemonType type = 4;
	.POGOProtos.Enums.PokemonType type_2 = 5;
	.POGOProtos.Settings.Master.Pokemon.CameraAttributes camera = 6;
	.POGOProtos.Settings.Master.Pokemon.EncounterAttributes encounter = 7;
	.POGOProtos.Settings.Master.Pokemon.StatsAttributes stats = 8;
	repeated .POGOProtos.Enums.PokemonMove quick_moves = 9;
	repeated .POGOProtos.Enums.PokemonMove cinematic_moves = 10;
	repeated float animation_time = 11;
	repeated .POGOProtos.Enums.PokemonId evolution_ids = 12;
	int32 evolution_pips = 13;
	.POGOProtos.Enums.PokemonRarity rarity = 14;
	float pokedex_height_m = 15;
	float pokedex_weight_kg = 16;
	.POGOProtos.Enums.PokemonId parent_pokemon_id = 17;
	float height_std_dev = 18;
	float weight_std_dev = 19;
	float km_distance_to_hatch = 20;
	.POGOProtos.Enums.PokemonFamilyId family_id = 21;
	int32 candy_to_evolve = 22;
	float km_buddy_distance = 23;
	.POGOProtos.Enums.BuddySize buddy_size = 24;
	float model_height = 25;
	repeated .POGOProtos.Settings.Master.Pokemon.EvolutionBranch evolution_branch = 26;
	float model_scale_v2 = 27;
	.POGOProtos.Enums.Form form = 28;
	.POGOProtos.Enums.PokemonMove event_quick_move = 29;
	.POGOProtos.Enums.PokemonMove event_cinematic_move = 30;
	repeated float buddy_offset_male = 31;
	repeated float buddy_offset_female = 32;
	float buddy_scale = 33;
	repeated float buddy_portrait_offset = 34;
	.POGOProtos.Enums.Form parent_form = 35;
	PokemonThirdMoveAttributes third_move = 36;
	bool is_transferable = 37;
	bool is_deployable = 38;
	repeated float combat_shoulder_camera_angle = 39;
	bool is_tradable = 40;
	repeated float combat_default_camera_angle = 41;
	repeated float combat_opponent_focus_camera_angle = 42;
	repeated float combat_player_focus_camera_angle = 43;
	repeated float combat_player_pokemon_position_offset = 44;
}

message IapItemDisplay {
	string sku = 1;
	.POGOProtos.Enums.HoloIapItemCategory category = 2;
	int32 sort_order = 3;
	// repeated .POGOProtos.Inventory.Item.ItemId item_ids = 4;
	// repeated int32 counts = 5;
	bool hidden = 6;
	bool sale = 7;
	string sprite_id = 8;
	string title = 9;
	string description = 10;
}

message PokemonUpgradeSettings {
	int32 upgrades_per_level = 1;
	int32 allowed_levels_above_player = 2;
	repeated int32 candy_cost = 3;
	repeated int32 stardust_cost = 4;
}

message QuestSettings {
	.POGOProtos.Enums.QuestType quest_type = 1;
	.POGOProtos.Settings.Master.Quest.DailyQuestSettings daily_quest = 2;
}

message IapItemCategoryDisplay {
	.POGOProtos.Enums.HoloIapItemCategory category = 1;
	string name = 2;
	bool hidden = 3;
	int32 sort_order = 4;
	bool banner_enabled = 5;
	string banner_title = 6;
	string image_url = 7;
	string description = 8;
}

message FriendshipLevelMilestoneSettings {
	int32 min_points_to_reach = 1;
	int32 milestone_xp_reward = 2;
	float attack_bonus_percentage = 3;
	int32 raid_ball_bonus = 4;
	repeated .POGOProtos.Enums.PokemonTradingType unlocked_trading = 5;
	float trading_discount = 6;
}

message PokemonScaleSetting {
	PokemonScaleMode pokemon_scale_mode = 1;
	float min_height = 2;
	float max_height = 3;

	enum PokemonScaleMode {
		NaturalScale = 0;
		GuiScale = 1;
		BattlePokemonScale = 2;
		RaidBossScale = 3;
		GymTopperScale = 4;
		MapPokemonScale = 5;
	}
}

message MoveSettings {
	.POGOProtos.Enums.PokemonMove movement_id = 1;
	int32 animation_id = 2;
	.POGOProtos.Enums.PokemonType pokemon_type = 3;
	float power = 4;
	float accuracy_chance = 5;
	float critical_chance = 6;
	float heal_scalar = 7;
	float stamina_loss_scalar = 8;
	int32 trainer_level_min = 9;
	int32 trainer_level_max = 10;
	string vfx_name = 11;
	int32 duration_ms = 12;
	int32 damage_window_start_ms = 13;
	int32 damage_window_end_ms = 14;
	int32 energy_delta = 15;
}

message EquippedBadgeSettings {
	int64 equip_badge_cooldown_ms = 1;
	repeated float catch_probability_bonus = 2;
	repeated float flee_probability_bonus = 3;
}

message CombatLeague {
	string title = 1;
	bool enabled = 2;
	repeated .POGOProtos.Data.Combat.UnlockCondition unlock_condition = 3;
	repeated .POGOProtos.Data.Combat.PokemonCondition pokemon_condition = 4;
	string icon_url = 5;
	int32 pokemon_count = 6;
	repeated .POGOProtos.Enums.PokemonId banned_pokemon = 7;
	.POGOProtos.Enums.BadgeType badge_type = 8;
	int32 minigame_defense_chance_limit = 9;
}

message CombatMoveSettings {
	.POGOProtos.Enums.PokemonMove unique_id = 1;
	.POGOProtos.Enums.PokemonType type = 2;
	float power = 3;
	string vfx_name = 4;
	int32 duration_turns = 5;
	int32 energy_delta = 6;
	.POGOProtos.Data.Combat.CombatMoveBuffs buffs = 7;
}

message ItemSettings {
	.POGOProtos.Inventory.Item.ItemId item_id = 1;
	.POGOProtos.Inventory.Item.ItemType item_type = 2;
	.POGOProtos.Enums.ItemCategory category = 3;
	float drop_freq = 4;
	int32 drop_trainer_level = 5;

	// One of the below attributes will be set in the response, the others will be null.

	.POGOProtos.Settings.Master.Item.PokeballAttributes pokeball = 6;
	.POGOProtos.Settings.Master.Item.PotionAttributes potion = 7;
	.POGOProtos.Settings.Master.Item.ReviveAttributes revive = 8;
	.POGOProtos.Settings.Master.Item.BattleAttributes battle = 9;
	.POGOProtos.Settings.Master.Item.FoodAttributes food = 10;
	.POGOProtos.Settings.Master.Item.InventoryUpgradeAttributes inventory_upgrade = 11;
	.POGOProtos.Settings.Master.Item.ExperienceBoostAttributes xp_boost = 12;
	.POGOProtos.Settings.Master.Item.IncenseAttributes incense = 13;
	.POGOProtos.Settings.Master.Item.EggIncubatorAttributes egg_incubator = 14;
	.POGOProtos.Settings.Master.Item.FortModifierAttributes fort_modifier = 15;
	.POGOProtos.Settings.Master.Item.StardustBoostAttributes stardust_boost = 16;
}

message GymLevelSettings {
	repeated int32 required_experience = 1;
	repeated int32 leader_slots = 2;
	repeated int32 trainer_slots = 3;
	repeated int32 search_roll_bonus = 4;
}

message GymBattleSettings {
	float energy_per_sec = 1;
	float dodge_energy_cost = 2;
	float retarget_seconds = 3;
	float enemy_attack_interval = 4;
	float attack_server_interval = 5;
	float round_duration_seconds = 6;
	float bonus_time_per_ally_seconds = 7;
	int32 maximum_attackers_per_battle = 8;
	float same_type_attack_bonus_multiplier = 9;
	int32 maximum_energy = 10;
	float energy_delta_per_health_lost = 11;
	int32 dodge_duration_ms = 12;
	int32 minimum_player_level = 13;
	int32 swap_duration_ms = 14;
	float dodge_damage_reduction_percent = 15;
	int32 minimum_raid_player_level = 16;
}

message BadgeSettings {
	.POGOProtos.Enums.BadgeType badge_type = 1;
	int32 badge_rank = 2;
	repeated int32 targets = 3;
	repeated .POGOProtos.Data.Badge.BadgeCaptureReward capture_reward = 4;
	bool event_badge = 5;
	.POGOProtos.Settings.Master.EventBadgeSettings event_badge_settings = 6;
	string combat_league_template_id = 7;
}

message MoveSequenceSettings {
	repeated string sequence = 1;
}

message LuckyPokemonSettings {
	float power_up_stardust_discount_percent = 1;
}

message AvatarCustomizationSettings {
	bool enabled = 1;
	.POGOProtos.Data.Player.PlayerAvatarType avatar_type = 2;
	repeated .POGOProtos.Data.Avatar.AvatarCustomization.Slot slot = 3;
	string bundle_name = 4;
	string asset_name = 5;
	string group_name = 6;
	int32 sort_order = 7;
	AvatarCustomizationUnlockType unlock_type = 8;
	repeated AvatarCustomizationPromoType promo_type = 9;
	.POGOProtos.Enums.BadgeType unlock_badge_type = 10;
	string iap_sku = 11;
	int32 unlock_badge_level = 12;
	string icon_name = 13;
	int32 unlock_player_level = 14;

	enum AvatarCustomizationPromoType {
		UNSET_PROMO_TYPE = 0;
		SALE = 1;
		FEATURED = 2;
	}

	enum AvatarCustomizationUnlockType {
		UNSET_UNLOCK_TYPE = 0;
		DEFAULT = 1;
		MEDAL_REWARD = 2;
		IAP_CLOTHING = 3;
		LEVEL_REWARD = 4;
	}
}

message OnboardingSettings {
	bool skip_avatar_customization = 1;
	bool disable_initial_ar_prompt = 2;
	uint32 ar_prompt_player_level = 3;
}

message ExRaidSettings {
	.POGOProtos.Enums.FriendshipLevelMilestone minimum_ex_raid_share_level = 1;
}

message PlayerLevelSettings {
	repeated int32 rank_num = 1;
	repeated int32 required_experience = 2;
	repeated float cp_multiplier = 3;
	int32 max_egg_player_level = 4;
	int32 max_encounter_player_level = 5;
	int32 max_raid_encounter_player_level = 6;
	int32 max_quest_encounter_player_level = 7;
}

message CombatNpcPersonality {
	string personality_name = 1;
	float super_effective_chance = 2;
	float special_chance = 3;
	float defensive_minimum_score = 4;
	float defensive_maximum_score = 5;
	float offensive_minimum_score = 6;
	float offensive_maximum_score = 7;
}

message EventBadgeSettings {
	int64 valid_from_ms = 1;
	int64 valid_to_ms = 2;
	repeated .POGOProtos.Enums.BadgeType mutually_exclusive_badges = 3;
}

